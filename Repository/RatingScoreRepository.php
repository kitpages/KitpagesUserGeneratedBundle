<?php

namespace Kitpages\UserGeneratedBundle\Repository;

use Doctrine\ORM\EntityRepository;

use Kitpages\UserGeneratedBundle\Entity\RatingScore;

/**
 * CommentPostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RatingScoreRepository extends EntityRepository
{


    public function findByItemReferenceAndUserName($itemReference, $scoreType, $userName)
        {
            $dql = "
                SELECT rs
                FROM KitpagesUserGeneratedBundle:RatingScore rs
                WHERE rs.itemReference = :itemReference
                AND  rs.userName = :userName
                AND rs.scoreType = :scoreType
            ";

             $query = $this->_em
                ->createQuery($dql)
                ->setParameter("itemReference", $itemReference)
                ->setParameter("userName", $userName)
                ->setParameter("scoreType", $scoreType);

            return $query->getResult();
        }

    public function averageByItemReference($itemReference, $scoreType)
    {
        $dql = "
            SELECT AVG(rs.score) as average
            FROM KitpagesUserGeneratedBundle:RatingScore rs
            WHERE rs.itemReference = :itemReference
            AND rs.scoreType = :scoreType
            GROUP BY rs.itemReference
        ";

         $query = $this->_em
            ->createQuery($dql)
            ->setParameter("itemReference", $itemReference)
            ->setParameter("scoreType", $scoreType);

        $average = $query->getResult();
        if ($average != null ) {
            return $average[0]['average'];
        } else {
            return null;
        }
    }

    public function quantityScoreByItemReference($itemReference, $scoreType)
    {
        $dql = "
            SELECT COUNT(rs.score) as quantity, rs.score as score
            FROM KitpagesUserGeneratedBundle:RatingScore rs
            WHERE rs.itemReference = :itemReference
            AND rs.scoreType = :scoreType
            GROUP BY rs.score
        ";

         $query = $this->_em
            ->createQuery($dql)
            ->setParameter("itemReference", $itemReference)
            ->setParameter("scoreType", $scoreType);
        return $query->getResult();
    }

    public function percentageScoreByItemReference($itemReference, $scoreType)
    {

        $dql = "
            SELECT COUNT(rs.score) as quantity
            FROM KitpagesUserGeneratedBundle:RatingScore rs
            WHERE rs.itemReference = :itemReference
            AND rs.scoreType = :scoreType
            GROUP BY rs.itemReference
        ";
        $query = $this->_em
           ->createQuery($dql)
           ->setParameter("itemReference", $itemReference)
           ->setParameter("scoreType", $scoreType);
        $total = $query->getResult();

        if ($total != null ) {
            $total = $total[0]['quantity'];
            $dql = "
                SELECT 100*COUNT(rs.score)/".$total." as percentage, rs.score as score
                FROM KitpagesUserGeneratedBundle:RatingScore rs
                WHERE rs.itemReference = :itemReference
                AND rs.scoreType = :scoreType
                GROUP BY rs.score
            ";

             $query = $this->_em
                ->createQuery($dql)
                ->setParameter("itemReference", $itemReference)
                ->setParameter("scoreType", $scoreType);

            return $query->getResult();
        } else {
            return array();
        }
    }


}